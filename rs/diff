index 9a19160..12b715d 100644
--- a/rs/src/main.rs
+++ b/rs/src/main.rs
@@ -36,7 +36,7 @@ impl Graph {
         self.edges.push(e)
     }
     
-    fn find_by_id(&mut self, id: usize) -> Rc<Vertex> {
+    fn find_by_id(&self, id: usize) -> Rc<Vertex> {
         self.verts.iter().find(|v| v.id == id).cloned().unwrap()
     }
 
@@ -78,20 +78,22 @@ impl Graph {
         }
     }
 
-    pub fn get_edges(&self, v: Rc<Vertex>, result: &mut Vec<Rc<Edge>>) {   
+    pub fn get_edges(&self, v: Rc<Vertex>) ->  Vec<Rc<Edge>> {
+        let mut edges: Vec<Rc<Edge>> = vec![];
         for edge in &self.edges {
             if edge.v == v {
-                result.push(Rc::clone(&edge));
+                edges.push(Rc::clone(edge));
             }
         }
+        edges
     }
 
-    pub fn get_neighbours(&self, v: Rc<Vertex>, result: &mut Vec<Rc<Vertex>>) {
-        let mut collector = Vec::new();
-        self.get_edges(v, &mut collector);
-        for edge in collector {
+    pub fn get_neighbours(&self, v: Rc<Vertex>) -> Vec<Rc<Vertex>> {
+        let mut result = Vec::new();
+        for edge in self.get_edges(v) {
             result.push(Rc::clone(&edge.u));
         }
+        result
     }
 }
 
@@ -100,8 +102,11 @@ fn main() {
     let mut graph = Graph::new();
     graph.load(path);
     println!("Arquivo carregado com sucesso!");
-    let mut neighbours: Vec<Edge> = Vec::new();
-    //test.get_neighbours(0,&mut neighbours);
+    let some_v = graph.find_by_id(1);
+    let neighbours = graph.get_neighbours(some_v.clone());
+    for v in neighbours {
+        println!("Vertex: {}, Neighbors{}", some_v.name, v.name)
+    }
     //if let Some(edge) = neighbours.pop() {
      //   println!("Achou vizinho {}", edge.u_pos);
     //}
